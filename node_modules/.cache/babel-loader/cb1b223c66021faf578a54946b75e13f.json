{"ast":null,"code":"var _jsxFileName = \"/Users/voskaul5058/Desktop/reactLearm/learnReact/src/gsaptest/GsapTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { gsap } from \"gsap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GsapTest() {\n  _s();\n\n  const boxRef = useRef();\n  useEffect(() => {\n    gsap.to(boxRef.current, {\n      rotation: \"+=360\"\n    });\n  });\n  const [count, setCount] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      ref: boxRef,\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setCount(count + 1);\n      },\n      children: \"Click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n  /*\n  const header = React.createRef()\n   useEffect(() => {\n    gsap.to(header.current, { color: \"red\", duration: 2 })\n  }, [header])\n   return (\n    <div>\n      <h1 ref={header}>hellow Gsap world!</h1>\n    </div>\n  )\n  */\n}\n\n_s(GsapTest, \"tng2Y04M8MQdSx0p3rIeTTtU9yc=\");\n\n_c = GsapTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"GsapTest\");","map":{"version":3,"sources":["/Users/voskaul5058/Desktop/reactLearm/learnReact/src/gsaptest/GsapTest.js"],"names":["React","useRef","useEffect","useState","gsap","GsapTest","boxRef","to","current","rotation","count","setCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,MAArB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAMC,MAAM,GAAGL,MAAM,EAArB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,IAAI,CAACG,EAAL,CAAQD,MAAM,CAACE,OAAf,EAAwB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAxB;AACD,GAFQ,CAAT;AAGA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AAEA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAEG,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,gBAAII;AAAJ;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AACE,MAAA,OAAO,EAAE,MAAM;AACbC,QAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;;GAnCuBL,Q;;KAAAA,Q","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\"\nimport { gsap } from \"gsap\"\n\nexport default function GsapTest() {\n  const boxRef = useRef()\n  useEffect(() => {\n    gsap.to(boxRef.current, { rotation: \"+=360\" })\n  })\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <div className=\"box\" ref={boxRef}>\n        Hello\n      </div>\n      <p>{count}</p>\n      <button\n        onClick={() => {\n          setCount(count + 1)\n        }}\n      >\n        Click\n      </button>\n    </div>\n  )\n  /*\n  const header = React.createRef()\n\n  useEffect(() => {\n    gsap.to(header.current, { color: \"red\", duration: 2 })\n  }, [header])\n\n  return (\n    <div>\n      <h1 ref={header}>hellow Gsap world!</h1>\n    </div>\n  )\n  */\n}\n"]},"metadata":{},"sourceType":"module"}